syntax = "proto3";
option java_multiple_files = true;

package org.neo4j.raft;

service RaftService {
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

message RequestVoteRequest {
  int32 term = 1; // candidate’s term
  int64 candidateId = 2; // candidate requesting vote
  int32 lastLogIndex = 3; // index of candidate’s last log entry
  int32 lastLogTerm = 4; // term of candidate’s last log entry
}

message RequestVoteResponse {
  int32 term = 1; // currentTerm, for candidate to update itself
  bool voteGranted = 2; // true means candidate received vote
}

message AppendEntriesRequest {
  int32 term = 1;
  int64 leaderId = 2; // so follower can redirect clients
  int32 prevLogIndex = 3; // index of log entry immediately preceding new ones
  int32 prevLogTerm = 4; // term of prevLogIndex entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat; may send more than one for efficiency)
  int32 leaderCommit = 6; // leader’s commitIndex
}

message AppendEntriesResponse {
  int32 term = 1; // currentTerm, for leader to update itself
  bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
  int32 conflictIndex = 3;
  int32 conflictTerm = 4;
}

message LogEntry {
  int32 term = 1;
  string command = 2;
}

message InstallSnapshotRequest {
  int32 term = 1; // leader's term
  int64 leaderId = 2; // so follower can redirect clients
  int32 lastIncludedIndex = 3; // the snapshot replaces all entries up through and including this index
  int32 lastIncludedTerm = 4; // term of lastIncludedIndex
  int32 offset = 5; //byte offset where chunk is positioned in the snapshot file
  bytes data = 6; // raw bytes of the snapshot chunk, starting at offset
  bool done = 7;
}

message InstallSnapshotResponse {
  int32 term = 1; // currentTerm, for leader to update itself
}